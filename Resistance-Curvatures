import numpy as np
import math
import matplotlib.pyplot as plt
import networkx as nx

# function that takes in the adjacency matrix of a graph (as a numpy array) and returns a list of the steinerberger effective resistance curvature at each node
# this is the definition that our data uses!
def res_curvature(adj_mat):
  # construct Laplacian
  ones_vector = np.ones(adj_mat[0].size)
  Degree = np.diag(ones_vector @ adj_mat)
  L = Degree - adj_mat

  # construct Gamma
  ones_matrix = np.ones([adj_mat[0].size, adj_mat[0].size])
  one_over_n = ones_matrix * (1/adj_mat[0].size)
  Gamma = L + one_over_n
  GammaInverse = np.linalg.inv(Gamma)

  # construct effective resistance matrix Omega
  Omega = np.empty([adj_mat.shape[0], adj_mat.shape[1]])

  for i in range(adj_mat.shape[0]):
    for j in range(adj_mat.shape[1]):
        Omega[i,j] = GammaInverse[i,i] + GammaInverse[j,j] - 2 * GammaInverse[i,j]

  # compute effective resistance curvature vector
  ones_vector = np.ones(adj_mat.shape[0])
  resistance_curvature = np.linalg.solve(Omega, ones_vector)

  return resistance_curvature

#####################################################################################

# function that takes in the adjacency matrix of a graph (as a numpy array) and returns a list of the node resistance curvature at each node
def node_res_curvature(adj_mat):
  # construct Laplacian
  ones_vector = np.ones(adj_mat[0].size)
  Degree = np.diag(ones_vector @ adj_mat)
  L = Degree - adj_mat

  # construct Gamma
  ones_matrix = np.ones([adj_mat[0].size, adj_mat[0].size])
  one_over_n = ones_matrix * (1/adj_mat[0].size)
  Gamma = L + one_over_n
  GammaInverse = np.linalg.inv(Gamma)

  # construct effective resistance matrix Omega
  Omega = np.empty([adj_mat.shape[0], adj_mat.shape[1]])

  for i in range(adj_mat.shape[0]):
    for j in range(adj_mat.shape[1]):
        Omega[i,j] = GammaInverse[i,i] + GammaInverse[j,j] - 2 * GammaInverse[i,j]

  # compute node resistance curvature vector
  node_curvature = np.empty(adj_mat.shape[0])

  for i in range(adj_mat.shape[0]):
      node_curvature_i = 1
      for j in range(adj_mat.shape[0]):
          if adj_mat[i,j] == 1:
              node_curvature_i = node_curvature_i - (0.5 * Omega[i,j])
      node_curvature[i] = node_curvature_i

  return node_curvature

#####################################################################################

# function that takes in the adjacency matrix of a graph (as a numpy array) and returns a matrix (numpy array) of the link resistance curvature at each link
def link_res_curvature(adj_mat):
  # construct Laplacian
  ones_vector = np.ones(adj_mat[0].size)
  Degree = np.diag(ones_vector @ adj_mat)
  L = Degree - adj_mat

  # construct Gamma
  ones_matrix = np.ones([adj_mat[0].size, adj_mat[0].size])
  one_over_n = ones_matrix * (1/adj_mat[0].size)
  Gamma = L + one_over_n
  GammaInverse = np.linalg.inv(Gamma)

  # construct effective resistance matrix Omega
  Omega = np.empty([adj_mat.shape[0], adj_mat.shape[1]])

  for i in range(adj_mat.shape[0]):
    for j in range(adj_mat.shape[1]):
        Omega[i,j] = GammaInverse[i,i] + GammaInverse[j,j] - 2 * GammaInverse[i,j]

  # compute node resistance curvature vector
  node_curvature = np.empty(adj_mat.shape[0])

  for i in range(adj_mat.shape[0]):
      node_curvature_i = 1
      for j in range(adj_mat.shape[0]):
          if adj_mat[i,j] == 1:
              node_curvature_i = node_curvature_i - (0.5 * Omega[i,j])
      node_curvature[i] = node_curvature_i

  # compute link resistance curvature
  link_curvature = np.zeros([adj_mat.shape[0], adj_mat.shape[0]])

  for i in range(adj_mat.shape[0]):
      for j in range(adj_mat.shape[0]):
          if adj_mat[i,j] == 1:
              link_curvature[i,j] = (2 * (node_curvature[i] + node_curvature[j])) / Omega[i,j]

  return link_curvature

#####################################################################################

# if you want to, draw the graph! its nodes are labeled with their resistance curvature
# (blue is positive, red is negative)
def draw_graph_with_curvature(adj_mat):
  G = nx.convert_matrix.from_numpy_array(adj_mat)

  # make labels
  V = np.array([])

  for i in range(adj_mat.shape[0]):
      V = np.append(V,[i])

  def convert_strings_to_floats(input_array):
      output_array = []
      for element in input_array:
          converted_float = float(element)
          converted_float = round(converted_float, 4)
          output_array.append(converted_float)
      return output_array

  # choose which node curvature to label with
  input_array = res_curvature(adj_mat)
  output_array = convert_strings_to_floats(input_array)

  labeldict = {}

  for node, curvature in zip(V, output_array):
      labeldict[node] = curvature

  # color blue if positive, red if negative
  vertex_colors = []

  for i in range(len(res_curvature(adj_mat))):
    if res_curvature(adj_mat)[i] <=0:
      vertex_colors = vertex_colors + ['r']
    else:
      vertex_colors = vertex_colors + ['b']

  # draw it !
  return nx.draw_networkx(G, labels=labeldict, node_color = vertex_colors)
